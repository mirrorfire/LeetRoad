//纵向扫描  T(n)=O(mn)  S(n)=O(1)
string longestCommonPrefix(vector<string>& strs) {
    if (!strs.size()) {
        return "";
    }
    int length = strs[0].size();
    int count = strs.size();
    for (int i = 0; i < length; ++i) {  //从第一个字符开始逐一比较
        char c = strs[0][i];
        for (int j = 1; j < count; ++j) {
            if (i == strs[j].size() || strs[j][i] != c) {  //发现不同或到头就返回最长
                return strs[0].substr(0, i);
            }
        }
    }
    return strs[0];
}

//横向扫描  T(n)=O(mn)  S(n)=O(1)
string longestCommonPrefix(vector<string>& strs) {
    if (!strs.size()) {
        return "";
    }
    string prefix = strs[0];
    int count = strs.size();
    for (int i = 1; i < count; ++i) {  //从第一个字符串开始完整比较更新最长前缀
        prefix = longestCommonPrefix(prefix, strs[i]);
        if (!prefix.size()) {
            break;
        }
    }
    return prefix;
}
string longestCommonPrefix(const string& str1, const string& str2) {
    int length = min(str1.size(), str2.size());  
    int index = 0;
    while (index < length && str1[index] == str2[index]) {  //比较得出新的最长前缀
        ++index;
    }
    return str1.substr(0, index);
}