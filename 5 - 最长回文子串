//中心扩展法  T(n)=O(n^2)  S(n)=O(1)
string longestPalindrome(string s) 
{
	if (s.length() < 1)  //判空
	{
		return "";
	}
	int start = 0, end = 0;  //回文子串的首位和末位
	for (int i = 0; i < s.length(); i++)  //没有充分利用回文的对称性  /*优化1 Manacher算法*/
	{
		int len1 = expandAroundCenter(s, i, i);  //一个元素为中心
		int len2 = expandAroundCenter(s, i, i + 1);  //两个元素为中心
		int len = max(len1, len2);
		if (len > end - start)  //位置i的最长回文子串更大则更新位置
		{
			start = i - (len - 1) / 2;  //更新到i位置最长回文子串的首位
			end = i + len / 2;  //更新到i位置最长回文子串的末位
		}
	}
	return s.substr(start, end - start + 1);
}

int expandAroundCenter(string s, int left, int right)
{
	int l = left, r = right;
	while (l >= 0 && r < s.length() && s[l] == s[r])  //由中心点左右扩展
	{
		l--;
		r++;
	}
	return r - l - 1;  //返回当前中心最大回文子串
}

//优化1：Manacher算法  T(n)=O(n)  S(n)=O(n)
string longestPalindrome(string s) {
    if(s.empty() || s.size() < 2) {
        return s;
    }
    string tmp = "#";
    for(char c : s) {  //对原始字符串做处理，将abc变成#a#b#c#,都当做奇数判断
        tmp += c;
        tmp += "#";
    }
    tmp += "#";
    int n = tmp.size();
    int start = 0;
    int maxLen = 0;
    for(int i = 0; i < n; ++i) {      //从左到右遍历处理过的字符串，求每个字符的回文半径
        int cur = expand(tmp, i, i);  // //计算当前以i 为中心的回文半径
        if(cur > maxLen) {  //如果当前计算的半径大于maxLen，就更新start(原始字符的起始位置)
            start = (i - cur) / 2;
            maxLen = cur;
        }
    }
    return s.substr(start, maxLen);  //根据start和maxLen，从原始字符串中截取一段返回
}

int expand(string s, int left, int right) {
    while(left >= 0 && right < s.size() && s[left] == s[right]) {
        --left;
        ++right;
    }
    return (right - left - 2) / 2;  //以left和right为起点，计算回文半径，由于while循环退出后left和right各多走了一步,所以在返回的总长度时要减去2
}